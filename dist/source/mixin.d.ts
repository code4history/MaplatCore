import { default as Weiwudi } from 'weiwudi';
import { MaplatMap } from '../map_ex';
import { Coordinate } from 'ol/coordinate';
import { Size } from 'ol/size';
import { Feature, Polygon } from 'geojson';
type SourceConstructor<T = object> = new (...args: any[]) => T;
type ViewpointObject = {
    x?: number;
    y?: number;
    latitude?: number;
    longitude?: number;
    mercZoom?: number;
    zoom?: number;
    direction?: number;
    rotation?: number;
};
export type ViewpointArray = [Coordinate?, number?, number?];
export type CrossCoordinatesArray = [
    Coordinate[],
    Size?
];
export declare function setCustomFunction<TBase extends SourceConstructor>(Base: TBase): ((abstract new (...args: any[]) => {
    weiwudi?: Weiwudi;
    _map?: MaplatMap;
    homePosition?: Coordinate;
    mercZoom?: number;
    pois: any;
    officialTitle: string;
    title: string;
    mapID: string;
    label: string;
    initialWait?: Promise<any>;
    maxZoom?: number;
    minZoom?: number;
    envelope?: Feature<Polygon>;
    centroid?: number[];
    homeMarginPixels: number;
    thumbnail?: string;
    poiTemplate?: string;
    poiStyle?: string;
    iconTemplate?: string;
    startFrom?: string;
    controls?: any[];
    northUp?: boolean;
    tapDuration?: number;
    mercatorXShift: number;
    mercatorYShift: number;
    icon?: string;
    selectedIcon?: string;
    initialize(options: any): void;
    isBasemap(): any;
    isWmts(): any;
    isMapbox(): any;
    isMapLibre(): any;
    insideCheckSysCoord(sysCoord: Coordinate): boolean;
    getCacheEnable(): boolean;
    getTileCacheStatsAsync(): Promise<{
        size?: number;
        count?: number;
        total?: number;
        percent?: number;
    }>;
    getTileCacheSizeAsync(): Promise<number>;
    fetchAllTileCacheAsync(callback: any): Promise<void>;
    cancelTileCacheAsync(): Promise<void>;
    clearTileCacheAsync(): Promise<void>;
    getMap(): MaplatMap;
    setMap(map: MaplatMap): void;
    setViewpointRadian(cond: ViewpointObject): void;
    setViewpoint(cond: ViewpointObject): void;
    defZoom(screenSize?: Size): number;
    goHome(): void;
    resetRotation(): void;
    resetDirection(): void;
    resetCirculation(): void;
    setGPSMarkerAsync(position: any, ignoreMove?: boolean): Promise<unknown>;
    setGPSMarker(position: any, ignoreMove?: boolean): void;
    mercsFromGPSValue(lnglat: Coordinate, acc: number): number[][];
    rotateMatrix(xys: number[][], theta?: number): Coordinate[];
    resolvePois(pois?: any): Promise<void>;
    getPoi(id: string): undefined;
    addPoi(data: any, clusterId?: string): any;
    removePoi(id: string): void;
    clearPoi(clusterId?: string): void;
    listPoiLayers(hideOnly?: boolean, nonzero?: boolean): any[];
    getPoiLayer(id: string): any;
    addPoiLayer(id: string, data: any): void;
    removePoiLayer(id: string): void;
    merc2XyAsync(merc: Coordinate): Promise<Coordinate>;
    merc2XyAsync_ignoreBackground(merc: Coordinate): Promise<Coordinate | void>;
    xy2MercAsync(xy: Coordinate): Promise<Coordinate>;
    xy2SysCoord(xy: Coordinate): Coordinate;
    sysCoord2Xy(sysCoord: Coordinate): Coordinate;
    viewpoint2MercsAsync(viewpoint?: ViewpointArray, size?: Size): Promise<CrossCoordinatesArray>;
    mercs2ViewpointAsync(mercs: CrossCoordinatesArray): Promise<ViewpointArray>;
    mercs2SysCoordsAsync_multiLayer(mercs: CrossCoordinatesArray): Promise<(CrossCoordinatesArray | undefined)[]>;
    merc2SysCoordAsync_ignoreBackground(merc: Coordinate): Promise<Coordinate | void>;
    merc2SysCoordAsync(merc: Coordinate): Promise<Coordinate>;
    sysCoord2MercAsync(sysCoord: Coordinate): Promise<Coordinate>;
    zoom2Radius(size: Size, zoom?: number): number;
    viewpoint2SysCoords(viewpoint?: ViewpointArray, size?: Size): CrossCoordinatesArray;
    mercViewpoint2Mercs(viewpoint?: ViewpointArray, size?: Size): CrossCoordinatesArray;
    sysCoords2Viewpoint(sysCoords: CrossCoordinatesArray): ViewpointArray;
    mercs2MercViewpoint(mercs: CrossCoordinatesArray): ViewpointArray;
    sysCoords2Xys(sysCoords: CrossCoordinatesArray): CrossCoordinatesArray;
    xys2SysCoords(xys: CrossCoordinatesArray): CrossCoordinatesArray;
    mercs2XysAsync(mercs: CrossCoordinatesArray): Promise<CrossCoordinatesArray>;
    xys2MercsAsync(xys: CrossCoordinatesArray): Promise<CrossCoordinatesArray>;
}) & {
    isBasemap_: boolean;
    isWmts_: boolean;
    isMapbox_: boolean;
    isMapLibre_: boolean;
    isBasemap(): boolean;
    isWmts(): boolean;
    isMapbox(): boolean;
    isMapLibre(): boolean;
    createAsync(options: any): Promise<any>;
}) & TBase;
export declare function setCustomFunctionBase<TBase extends SourceConstructor>(Base: TBase): ((abstract new (...args: any[]) => {
    insideCheckXy(xy: Coordinate): boolean;
    insideCheckSysCoord(histCoords: Coordinate): boolean;
    modulateXyInside(xy: any): any;
    modulateSysCoordInside(histCoords: any): any;
    merc2XyAsync(merc: Coordinate): Promise<Coordinate>;
    merc2XyAsync_ignoreBackground(merc: Coordinate): Promise<Coordinate | void>;
    xy2MercAsync(xy: Coordinate): Promise<Coordinate>;
    xy2SysCoord(xy: Coordinate): Coordinate;
    sysCoord2Xy(sysCoord: Coordinate): Coordinate;
    viewpoint2MercsAsync(viewpoint?: ViewpointArray, size?: Size): Promise<CrossCoordinatesArray>;
    mercs2ViewpointAsync(mercs: CrossCoordinatesArray): Promise<ViewpointArray>;
    mercs2SysCoordsAsync_multiLayer(mercs: CrossCoordinatesArray): Promise<(CrossCoordinatesArray | undefined)[]>;
    defZoom(): number;
    weiwudi?: Weiwudi;
    _map?: MaplatMap;
    homePosition?: Coordinate;
    mercZoom?: number;
    pois: any;
    officialTitle: string;
    title: string;
    mapID: string;
    label: string;
    initialWait?: Promise<any>;
    maxZoom?: number;
    minZoom?: number;
    envelope?: Feature<Polygon>;
    centroid?: number[];
    homeMarginPixels: number;
    thumbnail?: string;
    poiTemplate?: string;
    poiStyle?: string;
    iconTemplate?: string;
    startFrom?: string;
    controls?: any[];
    northUp?: boolean;
    tapDuration?: number;
    mercatorXShift: number;
    mercatorYShift: number;
    icon?: string;
    selectedIcon?: string;
    initialize(options: any): void;
    isBasemap(): any;
    isWmts(): any;
    isMapbox(): any;
    isMapLibre(): any;
    getCacheEnable(): boolean;
    getTileCacheStatsAsync(): Promise<{
        size?: number;
        count?: number;
        total?: number;
        percent?: number;
    }>;
    getTileCacheSizeAsync(): Promise<number>;
    fetchAllTileCacheAsync(callback: any): Promise<void>;
    cancelTileCacheAsync(): Promise<void>;
    clearTileCacheAsync(): Promise<void>;
    getMap(): MaplatMap;
    setMap(map: MaplatMap): void;
    setViewpointRadian(cond: ViewpointObject): void;
    setViewpoint(cond: ViewpointObject): void;
    goHome(): void;
    resetRotation(): void;
    resetDirection(): void;
    resetCirculation(): void;
    setGPSMarkerAsync(position: any, ignoreMove?: boolean): Promise<unknown>;
    setGPSMarker(position: any, ignoreMove?: boolean): void;
    mercsFromGPSValue(lnglat: Coordinate, acc: number): number[][];
    rotateMatrix(xys: number[][], theta?: number): Coordinate[];
    resolvePois(pois?: any): Promise<void>;
    getPoi(id: string): undefined;
    addPoi(data: any, clusterId?: string): any;
    removePoi(id: string): void;
    clearPoi(clusterId?: string): void;
    listPoiLayers(hideOnly?: boolean, nonzero?: boolean): any[];
    getPoiLayer(id: string): any;
    addPoiLayer(id: string, data: any): void;
    removePoiLayer(id: string): void;
    merc2SysCoordAsync_ignoreBackground(merc: Coordinate): Promise<Coordinate | void>;
    merc2SysCoordAsync(merc: Coordinate): Promise<Coordinate>;
    sysCoord2MercAsync(sysCoord: Coordinate): Promise<Coordinate>;
    zoom2Radius(size: Size, zoom?: number): number;
    viewpoint2SysCoords(viewpoint?: ViewpointArray, size?: Size): CrossCoordinatesArray;
    mercViewpoint2Mercs(viewpoint?: ViewpointArray, size?: Size): CrossCoordinatesArray;
    sysCoords2Viewpoint(sysCoords: CrossCoordinatesArray): ViewpointArray;
    mercs2MercViewpoint(mercs: CrossCoordinatesArray): ViewpointArray;
    sysCoords2Xys(sysCoords: CrossCoordinatesArray): CrossCoordinatesArray;
    xys2SysCoords(xys: CrossCoordinatesArray): CrossCoordinatesArray;
    mercs2XysAsync(mercs: CrossCoordinatesArray): Promise<CrossCoordinatesArray>;
    xys2MercsAsync(xys: CrossCoordinatesArray): Promise<CrossCoordinatesArray>;
}) & {
    isBasemap_: boolean;
    isWmts_: boolean;
    isMapbox_: boolean;
    isMapLibre_: boolean;
    isBasemap(): boolean;
    isWmts(): boolean;
    isMapbox(): boolean;
    isMapLibre(): boolean;
    createAsync(options: any): Promise<any>;
}) & TBase;
export declare function setCustomFunctionOverlay<TBase extends SourceConstructor>(Base: TBase): ((abstract new (...args: any[]) => {
    weiwudi?: Weiwudi;
    _map?: MaplatMap;
    homePosition?: Coordinate;
    mercZoom?: number;
    pois: any;
    officialTitle: string;
    title: string;
    mapID: string;
    label: string;
    initialWait?: Promise<any>;
    maxZoom?: number;
    minZoom?: number;
    envelope?: Feature<Polygon>;
    centroid?: number[];
    homeMarginPixels: number;
    thumbnail?: string;
    poiTemplate?: string;
    poiStyle?: string;
    iconTemplate?: string;
    startFrom?: string;
    controls?: any[];
    northUp?: boolean;
    tapDuration?: number;
    mercatorXShift: number;
    mercatorYShift: number;
    icon?: string;
    selectedIcon?: string;
    initialize(options: any): void;
    isBasemap(): any;
    isWmts(): any;
    isMapbox(): any;
    isMapLibre(): any;
    insideCheckSysCoord(sysCoord: Coordinate): boolean;
    getCacheEnable(): boolean;
    getTileCacheStatsAsync(): Promise<{
        size?: number;
        count?: number;
        total?: number;
        percent?: number;
    }>;
    getTileCacheSizeAsync(): Promise<number>;
    fetchAllTileCacheAsync(callback: any): Promise<void>;
    cancelTileCacheAsync(): Promise<void>;
    clearTileCacheAsync(): Promise<void>;
    getMap(): MaplatMap;
    setMap(map: MaplatMap): void;
    setViewpointRadian(cond: ViewpointObject): void;
    setViewpoint(cond: ViewpointObject): void;
    defZoom(screenSize?: Size): number;
    goHome(): void;
    resetRotation(): void;
    resetDirection(): void;
    resetCirculation(): void;
    setGPSMarkerAsync(position: any, ignoreMove?: boolean): Promise<unknown>;
    setGPSMarker(position: any, ignoreMove?: boolean): void;
    mercsFromGPSValue(lnglat: Coordinate, acc: number): number[][];
    rotateMatrix(xys: number[][], theta?: number): Coordinate[];
    resolvePois(pois?: any): Promise<void>;
    getPoi(id: string): undefined;
    addPoi(data: any, clusterId?: string): any;
    removePoi(id: string): void;
    clearPoi(clusterId?: string): void;
    listPoiLayers(hideOnly?: boolean, nonzero?: boolean): any[];
    getPoiLayer(id: string): any;
    addPoiLayer(id: string, data: any): void;
    removePoiLayer(id: string): void;
    merc2XyAsync(merc: Coordinate): Promise<Coordinate>;
    merc2XyAsync_ignoreBackground(merc: Coordinate): Promise<Coordinate | void>;
    xy2MercAsync(xy: Coordinate): Promise<Coordinate>;
    xy2SysCoord(xy: Coordinate): Coordinate;
    sysCoord2Xy(sysCoord: Coordinate): Coordinate;
    viewpoint2MercsAsync(viewpoint?: ViewpointArray, size?: Size): Promise<CrossCoordinatesArray>;
    mercs2ViewpointAsync(mercs: CrossCoordinatesArray): Promise<ViewpointArray>;
    mercs2SysCoordsAsync_multiLayer(mercs: CrossCoordinatesArray): Promise<(CrossCoordinatesArray | undefined)[]>;
    merc2SysCoordAsync_ignoreBackground(merc: Coordinate): Promise<Coordinate | void>;
    merc2SysCoordAsync(merc: Coordinate): Promise<Coordinate>;
    sysCoord2MercAsync(sysCoord: Coordinate): Promise<Coordinate>;
    zoom2Radius(size: Size, zoom?: number): number;
    viewpoint2SysCoords(viewpoint?: ViewpointArray, size?: Size): CrossCoordinatesArray;
    mercViewpoint2Mercs(viewpoint?: ViewpointArray, size?: Size): CrossCoordinatesArray;
    sysCoords2Viewpoint(sysCoords: CrossCoordinatesArray): ViewpointArray;
    mercs2MercViewpoint(mercs: CrossCoordinatesArray): ViewpointArray;
    sysCoords2Xys(sysCoords: CrossCoordinatesArray): CrossCoordinatesArray;
    xys2SysCoords(xys: CrossCoordinatesArray): CrossCoordinatesArray;
    mercs2XysAsync(mercs: CrossCoordinatesArray): Promise<CrossCoordinatesArray>;
    xys2MercsAsync(xys: CrossCoordinatesArray): Promise<CrossCoordinatesArray>;
}) & {
    isBasemap_: boolean;
    isWmts_: boolean;
    isMapbox_: boolean;
    isMapLibre_: boolean;
    isBasemap(): boolean;
    isWmts(): boolean;
    isMapbox(): boolean;
    isMapLibre(): boolean;
    createAsync(options: any): Promise<any>;
}) & TBase;
export declare function setCustomFunctionMaplat<TBase extends SourceConstructor>(Base: TBase): ((abstract new (...args: any[]) => {
    width: number;
    height: number;
    _maxxy: number;
    insideCheckXy(xy: Coordinate): boolean;
    insideCheckSysCoord(sysCoord: Coordinate): boolean;
    modulateXyInside(xy: any): number[];
    modulateSysCoordInside(histCoords: any): Coordinate;
    xy2SysCoord(xy: Coordinate): Coordinate;
    sysCoord2Xy(sysCoord: Coordinate): Coordinate;
    defZoom(screenSize?: Size): number;
    weiwudi?: Weiwudi;
    _map?: MaplatMap;
    homePosition?: Coordinate;
    mercZoom?: number;
    pois: any;
    officialTitle: string;
    title: string;
    mapID: string;
    label: string;
    initialWait?: Promise<any>;
    maxZoom?: number;
    minZoom?: number;
    envelope?: Feature<Polygon>;
    centroid?: number[];
    homeMarginPixels: number;
    thumbnail?: string;
    poiTemplate?: string;
    poiStyle?: string;
    iconTemplate?: string;
    startFrom?: string;
    controls?: any[];
    northUp?: boolean;
    tapDuration?: number;
    mercatorXShift: number;
    mercatorYShift: number;
    icon?: string;
    selectedIcon?: string;
    initialize(options: any): void;
    isBasemap(): any;
    isWmts(): any;
    isMapbox(): any;
    isMapLibre(): any;
    getCacheEnable(): boolean;
    getTileCacheStatsAsync(): Promise<{
        size?: number;
        count?: number;
        total?: number;
        percent?: number;
    }>;
    getTileCacheSizeAsync(): Promise<number>;
    fetchAllTileCacheAsync(callback: any): Promise<void>;
    cancelTileCacheAsync(): Promise<void>;
    clearTileCacheAsync(): Promise<void>;
    getMap(): MaplatMap;
    setMap(map: MaplatMap): void;
    setViewpointRadian(cond: ViewpointObject): void;
    setViewpoint(cond: ViewpointObject): void;
    goHome(): void;
    resetRotation(): void;
    resetDirection(): void;
    resetCirculation(): void;
    setGPSMarkerAsync(position: any, ignoreMove?: boolean): Promise<unknown>;
    setGPSMarker(position: any, ignoreMove?: boolean): void;
    mercsFromGPSValue(lnglat: Coordinate, acc: number): number[][];
    rotateMatrix(xys: number[][], theta?: number): Coordinate[];
    resolvePois(pois?: any): Promise<void>;
    getPoi(id: string): undefined;
    addPoi(data: any, clusterId?: string): any;
    removePoi(id: string): void;
    clearPoi(clusterId?: string): void;
    listPoiLayers(hideOnly?: boolean, nonzero?: boolean): any[];
    getPoiLayer(id: string): any;
    addPoiLayer(id: string, data: any): void;
    removePoiLayer(id: string): void;
    merc2XyAsync(merc: Coordinate): Promise<Coordinate>;
    merc2XyAsync_ignoreBackground(merc: Coordinate): Promise<Coordinate | void>;
    xy2MercAsync(xy: Coordinate): Promise<Coordinate>;
    viewpoint2MercsAsync(viewpoint?: ViewpointArray, size?: Size): Promise<CrossCoordinatesArray>;
    mercs2ViewpointAsync(mercs: CrossCoordinatesArray): Promise<ViewpointArray>;
    mercs2SysCoordsAsync_multiLayer(mercs: CrossCoordinatesArray): Promise<(CrossCoordinatesArray | undefined)[]>;
    merc2SysCoordAsync_ignoreBackground(merc: Coordinate): Promise<Coordinate | void>;
    merc2SysCoordAsync(merc: Coordinate): Promise<Coordinate>;
    sysCoord2MercAsync(sysCoord: Coordinate): Promise<Coordinate>;
    zoom2Radius(size: Size, zoom?: number): number;
    viewpoint2SysCoords(viewpoint?: ViewpointArray, size?: Size): CrossCoordinatesArray;
    mercViewpoint2Mercs(viewpoint?: ViewpointArray, size?: Size): CrossCoordinatesArray;
    sysCoords2Viewpoint(sysCoords: CrossCoordinatesArray): ViewpointArray;
    mercs2MercViewpoint(mercs: CrossCoordinatesArray): ViewpointArray;
    sysCoords2Xys(sysCoords: CrossCoordinatesArray): CrossCoordinatesArray;
    xys2SysCoords(xys: CrossCoordinatesArray): CrossCoordinatesArray;
    mercs2XysAsync(mercs: CrossCoordinatesArray): Promise<CrossCoordinatesArray>;
    xys2MercsAsync(xys: CrossCoordinatesArray): Promise<CrossCoordinatesArray>;
}) & {
    isBasemap_: boolean;
    isWmts_: boolean;
    isMapbox_: boolean;
    isMapLibre_: boolean;
    isBasemap(): boolean;
    isWmts(): boolean;
    isMapbox(): boolean;
    isMapLibre(): boolean;
    createAsync(options: any): Promise<any>;
}) & TBase;
export declare const META_KEYS: string[];
export declare function addCommonOptions(options: any): any;
export declare function setupTileLoadFunction(target: any): void;
export {};
