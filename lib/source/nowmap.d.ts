/// <reference path="../../src/types/weiwudi.d.ts" />
import { OSM } from "ol/source";
import { CrossCoordinatesArray, ViewpointArray } from "./mixin";
import { Coordinate } from "ol/coordinate";
import { Size } from "ol/size";
declare const NowMap_base: (abstract new (...args: any[]) => {
    weiwudi?: import("weiwudi").default | undefined;
    _map?: import("../map_ex").MaplatMap | undefined;
    homePosition?: Coordinate | undefined;
    mercZoom?: number | undefined;
    pois: any;
    officialTitle: string;
    title: string;
    mapID: string;
    label: string;
    initialWait?: Promise<any> | undefined;
    maxZoom?: number | undefined;
    minZoom?: number | undefined;
    envelope?: import("@turf/helpers").Feature<import("@turf/helpers").Polygon, import("@turf/helpers").Properties> | undefined;
    centroid?: number[] | undefined;
    insideCheckSysCoord(sysCoord: Coordinate): boolean;
    getCacheEnable(): boolean;
    getTileCacheStatsAsync(): Promise<{
        size?: number | undefined;
        count?: number | undefined;
        total?: number | undefined;
        percent?: number | undefined;
    }>;
    getTileCacheSizeAsync(): Promise<number>;
    fetchAllTileCacheAsync(callback: any): Promise<void>;
    cancelTileCacheAsync(): Promise<void>;
    clearTileCacheAsync(): Promise<void>;
    getMap(): import("../map_ex").MaplatMap | undefined;
    setViewpointRadian(cond: {
        x?: number | undefined;
        y?: number | undefined;
        latitude?: number | undefined;
        longitude?: number | undefined;
        mercZoom?: number | undefined;
        zoom?: number | undefined;
        direction?: number | undefined;
        rotation?: number | undefined;
    }): void;
    setViewpoint(cond: {
        x?: number | undefined;
        y?: number | undefined;
        latitude?: number | undefined;
        longitude?: number | undefined;
        mercZoom?: number | undefined;
        zoom?: number | undefined;
        direction?: number | undefined;
        rotation?: number | undefined;
    }): void;
    goHome(): void;
    setGPSMarkerAsync(position: any, ignoreMove?: boolean): Promise<unknown>;
    setGPSMarker(position: any, ignoreMove?: boolean): void;
    mercsFromGPSValue(lnglat: Coordinate, acc: number): number[][];
    rotateMatrix(xys: number[][], theta?: number | undefined): Coordinate[];
    resolvePois(pois?: any): Promise<void>;
    getPoi(id: string): undefined;
    addPoi(data: any, clusterId?: string | undefined): any;
    removePoi(id: string): void;
    clearPoi(clusterId?: string | undefined): void;
    listPoiLayers(hideOnly?: boolean, nonzero?: boolean): any[];
    getPoiLayer(id: string): any;
    addPoiLayer(id: string, data: any): void;
    removePoiLayer(id: string): void;
    merc2XyAsync(merc: Coordinate): Promise<Coordinate>;
    merc2XyAsync_ignoreBackground(merc: Coordinate): Promise<void | Coordinate>;
    xy2MercAsync(xy: Coordinate): Promise<Coordinate>;
    xy2SysCoord(xy: Coordinate): Coordinate;
    sysCoord2Xy(sysCoord: Coordinate): Coordinate;
    viewpoint2MercsAsync(viewpoint?: ViewpointArray | undefined, size?: Size | undefined): Promise<CrossCoordinatesArray>;
    mercs2ViewpointAsync(mercs: CrossCoordinatesArray): Promise<ViewpointArray>;
    mercs2SysCoordsAsync_multiLayer(mercs: CrossCoordinatesArray): Promise<(CrossCoordinatesArray | undefined)[]>;
    merc2SysCoordAsync_ignoreBackground(merc: Coordinate): Promise<void | Coordinate>;
    merc2SysCoordAsync(merc: Coordinate): Promise<Coordinate>;
    sysCoord2MercAsync(sysCoord: Coordinate): Promise<Coordinate>;
    zoom2Radius(size: Size, zoom?: number | undefined): number;
    viewpoint2SysCoords(viewpoint?: ViewpointArray | undefined, size?: Size | undefined): CrossCoordinatesArray;
    mercViewpoint2Mercs(viewpoint?: ViewpointArray | undefined, size?: Size | undefined): CrossCoordinatesArray;
    sysCoords2Viewpoint(sysCoords: CrossCoordinatesArray): ViewpointArray;
    mercs2MercViewpoint(mercs: CrossCoordinatesArray): ViewpointArray;
    sysCoords2Xys(sysCoords: CrossCoordinatesArray): CrossCoordinatesArray;
    xys2SysCoords(xys: CrossCoordinatesArray): CrossCoordinatesArray;
    mercs2XysAsync(mercs: CrossCoordinatesArray): Promise<CrossCoordinatesArray>;
    xys2MercsAsync(xys: CrossCoordinatesArray): Promise<CrossCoordinatesArray>;
}) & typeof OSM;
export declare class NowMap extends NowMap_base {
    constructor(options?: any);
    static createAsync(options: any): Promise<NowMap>;
    insideCheckXy(xy: Coordinate): boolean;
    insideCheckSysCoord(histCoords: Coordinate): boolean;
    modulateXyInside(xy: any): any;
    modulateSysCoordInside(histCoords: any): any;
    merc2XyAsync(merc: Coordinate): Promise<Coordinate>;
    merc2XyAsync_ignoreBackground(merc: Coordinate): Promise<Coordinate | void>;
    xy2MercAsync(xy: Coordinate): Promise<Coordinate>;
    xy2SysCoord(xy: Coordinate): Coordinate;
    sysCoord2Xy(sysCoord: Coordinate): Coordinate;
    viewpoint2MercsAsync(viewpoint?: ViewpointArray, size?: Size): Promise<CrossCoordinatesArray>;
    mercs2ViewpointAsync(mercs: CrossCoordinatesArray): Promise<ViewpointArray>;
    mercs2SysCoordsAsync_multiLayer(mercs: CrossCoordinatesArray): Promise<(CrossCoordinatesArray | undefined)[]>;
}
export {};
